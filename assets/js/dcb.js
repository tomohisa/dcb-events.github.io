function createQuery(e){return{items:e,matchesEvent(e){return this.items.some(t=>(!t.types||t.types.includes(e.type))&&(!t.tags||t.tags.every(t=>e.tags.includes(t))))},merge(e){return 0===e.items.length?e:createQuery([...this.items,...e.items])}}}function queryAll(){return{items:[],matchesEvent:e=>!0,merge:e=>queryAll()}}class InMemoryDcbEventStore{sequencedEvents=[];read(e,t){void 0===t&&(t={backwards:!1});let n=this.sequencedEvents.filter(n=>(!t.from||(!t.backwards||!(n.position>t.from))&&(!!t.backwards||!(n.position<t.from)))&&(0===e.items.length||e.matchesEvent(n)));return t.backwards&&(n=n.reverse()),t.limit&&(n=n.slice(0,t.limit)),{[Symbol.iterator]:()=>n[Symbol.iterator](),first:()=>n.length>0?n[0]:null}}append(e,t){if(t){let n=this.read(t.failIfEventsMatch,{backwards:!0,limit:1}).first()?.position||null;if(null!==n){if(!t.after)throw Error("The Event Store contained events matching the specified query but none were expected");if(n>t.after)throw Error(`The Event Store contained events matching the specified query after position ${t.after}`)}}Array.isArray(e)||(e=[e]);let r=this.sequencedEvents.length+1;this.sequencedEvents=this.sequencedEvents.concat(e.map(e=>({...e,position:r++})))}_flush(){this.sequencedEvents=[]}}function createProjection(e){let t=e.handlers??{},n=Object.keys(t),r=n.length>0?{types:n}:{types:[]};e.tagFilter&&(r.tags=e.tagFilter);let i=createQuery([r]);return{get initialState(){return e.initialState},apply(e,n){if(!i.matchesEvent(n))return e;let r=n.type,o=t[r];return o?o(e,n):e},get query(){return i}}}function composeProjections(e){let t=Object.fromEntries(Object.entries(e).map(([e,t])=>[e,t.initialState,])),n=Object.values(e).map(e=>e.query).reduce((e,t)=>e?e.merge(t):t,null)||queryAll();return{initialState:t,apply(t,r){if(!n.matchesEvent(r))return t;let i=!1,o={...t};for(let s in e){let a=e[s],l=t[s]??a.initialState,c=a.apply(l,r);l!==c&&(o[s]=c,i=!0)}return i?o:t},get query(){return n}}}function buildDecisionModel(e,t){let n=composeProjections(t),r=n.initialState,i=r,o=0;for(let s of e.read(n.query))i=n.apply(i,s),o=s.position;let a={failIfEventsMatch:n.query,after:o};return{state:i,appendCondition:a}}function partialDeepEqual(e,t){return"object"!=typeof e||null===e?e===t:"object"==typeof t&&null!==t&&Object.keys(e).every(n=>n in t&&partialDeepEqual(e[n],t[n]))}function runTests(e,t,n){for(let r of n){for(let i of(t instanceof InMemoryDcbEventStore&&t._flush(),r.given?.events??[]))t.append(i);let o=t.read(queryAll(),{backwards:!0,limit:1}).first()?.position||null,s=e[r.when.command.type];if("function"!=typeof s)throw Error(`Unknown command type: ${r.when.command.type}`);try{s.call(e,r.when.command.data)}catch(a){if(!r.then.expectedError){console.log(`✖ ${r.description} – expected no error, but got '${a.message}'`);continue}if(r.then.expectedError!==a.message){console.log(`✖ ${r.description} – expected error '${r.then.expectedError}' but got '${a.message}'`);continue}console.log(`✔ ${r.description}`);continue}let l=Array.from(t.read(queryAll(),{from:null!==o?o+1:void 0})).map(({position:e,...t})=>({...t}));if(r.then.expectedEvent&&!partialDeepEqual([r.then.expectedEvent],l)){console.log(`✖ ${r.description} – expected event ${JSON.stringify(r.then.expectedEvent)}' but got ${JSON.stringify(l[0]??null)}`);continue}if(!r.then.expectedError){console.log(`✔ ${r.description}`);continue}console.log(`✖ ${r.description} – expected error '${r.then.expectedError}' but none was thrown`)}}function addEventMetadata(e,t){return Object.assign(e,{metadata:t})}
##CODE##